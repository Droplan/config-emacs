#+TITLE: AM's GNU Emacs Con fig
#+AUTHOR: Aleksey Malkov
#+DESCRIPTION: AM's personal Emacs config.

* MELPA
Дополнительный репозиторий пакетов для emacs.

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  ;; Comment/uncomment this line to enable MELPA Stable if desired.
  ;; See `package-archive-priorities` and `package-pinned-packages`.
  ;; Most users will not need or want to do this.
  ;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (package-initialize)
#+end_src

* НАСТРОЙКИ USE-PACKAGE
USE-PACKAGE включён в ядро, но в стандартной конфигурации он принимает только конфигурацию, не устанавливая пакет без ключа ~:ensure t~, что неудобно
#+begin_src emacs-lisp
  (use-package use-package
    :custom
    (use-package-always-ensure t)
    (package-native-compile t)
    (warning-minimum-level :error))
#+end_src

* АВТОЗАВЕРШЕНИЕ
** Vertico
Vertico предоставляет производительный и минималистичный пользовательский интерфейс вертикального завершения, основанный на системе завершения по умолчанию
#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)
    (setq vertico-scroll-margin 0) ;; Different scroll margin
    (setq vertico-count 20) ;; Show more candidates
    (setq vertico-resize t) ;; Grow and shrink the Vertico minibuffer
    (setq vertico-cycle t) ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    )

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+end_src

** Savehist
Сохраняет историю команд, запущенных через ~M-x~ при закрытии Emacs
#+begin_src emacs-lisp
  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))
#+end_src

** Orderless
Выводит совпадения команд в минибуфере вне зависимости от очерёдности ввода слов (a b = b a)
#+begin_src emacs-lisp
  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Marginalia
Выводит описание команды при поиске в минибуфере
#+begin_src emacs-lisp
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))

    ;; The :init section is always executed.
    :init

    ;; Marginalia must be activated in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))
#+end_src

** Consult
Consult предоставляет команды поиска и навигации, основанные на функции завершения Emacs ~completing-read~

#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    (autoload 'projectile-project-root "projectile")
    (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
    )
#+end_src
** Embark
Добавляет множество дополнительных действий
#+begin_src emacs-lisp
  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc. You may adjust the
    ;; Eldoc strategy, if you want to see the documentation from
    ;; multiple providers. Beware that using this can be a little
    ;; jarring since the message shown in the minibuffer can be more
    ;; than one line, causing the modeline to move up and down:

    ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Company
Company is a text completion framework for Emacs. The name stands for “complete anything”. Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part.

#+begin_src emacs-lisp
  (use-package company
    :defer 2
    :diminish
    :init (global-company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-select-next)
                ("<backtab>" . company-select-previous))
    :custom
    (company-idle-delay 0)
    (company-minimum-prefix-length 2)
    (company-selection-wrap-around t)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    )

  ;; Required for variable pitch
  ;; When using variable pitch fonts, the dropdown menu for text completion gets distorted because the letters are not all the same size
  (use-package company-posframe
    :config
    (company-posframe-mode 1))
#+end_src 

** Flycheck
Install =luacheck= from your Linux distro's repositories for flycheck to work correctly with lua files.  Install =python-pylint= for flycheck to work with python files. Haskell works with flycheck as long as =haskell-ghc= or =haskell-stack-ghc= is installed.  For more information on language support for flycheck, [[https://www.flycheck.org/en/latest/languages.html][read this]].
#+begin_src emacs-lisp
  (use-package flycheck
    :defer t
    :diminish
    :init (global-flycheck-mode))
#+end_src

* НАСТРОЙКИ ДЛЯ ЯЗЫКОВ
** MARKDOWN MODE
#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown")
    :bind (:map markdown-mode-map
                ("C-c C-e" . markdown-do)))
#+end_src

** LANGUAGE SUPPORT
Emacs has built-in programming language modes for Lisp, Scheme, DSSSL, Ada, ASM, AWK, C, C++, Fortran, Icon, IDL (CORBA), IDLWAVE, Java, Javascript, M4, Makefiles, Metafont, Modula2, Object Pascal, Objective-C, Octave, Pascal, Perl, Pike, PostScript, Prolog, Python, Ruby, Simula, SQL, Tcl, Verilog, and VHDL. Other languages will require you to install additional modes.

#+begin_src emacs-lisp
  (use-package lua-mode)
#+end_src

* Заметки, задачи, библиография
** Org-mode
*** Стандартные настройки
#+begin_src emacs-lisp
  ;; Improve org mode looks
  (setq-default org-startup-indented t            ;; Удаляет лишние звёзды заголовков, устанавливает отступ у заголовков и текста в них
                org-pretty-entities t             ;; Отображает надстрочные и подстрочные символы, буквы греческого алфавита написанные как в LaTeX
                org-use-sub-superscripts "{}"     ;; Запрещает показывать надстрочные и подстрочные симовлы, если они не обёрнуты в фигурные скобки
                org-hide-emphasis-markers t       ;; Прячет символы разметки 
                org-startup-with-inline-images t  ;; Включает превью для изображений
                org-image-actual-width '(300))    ;; Устанавливает максимальную ширину изображений по умолчанию
#+end_src

*** Org-appear
Показывает маркеры разметки, когда курсор находится на слове
#+begin_src emacs-lisp
  (use-package org-appear
    :hook
    (org-mode . org-appear-mode))
#+end_src

*** Org-modern
Меняет символы разметки на более красивыe
#+begin_src emacs-lisp
  (use-package org-modern
    :hook
    (org-mode . global-org-modern-mode)
    ;; :custom
    ;; (org-modern-keyword nil)
    ;; (org-modern-checkbox nil)
    ;; (org-modern-table nil)
    ;; (org-modern-star t) ;; Отключаю, так как уменьшается отступ слева у между заголовками разного уровня, для меня не удобно. Решил через установку отступа
    )
#+end_src

*** TOC
Вставить содержание можно в org и markdown файлах, установив тег ~:toc:~ у заголовка и применив команду ~toc-org-insert-toc~
#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable)
    (add-hook 'markdown-mode-hook 'toc-org-mode))
#+end_src

*** Org-fragtog
Пакет org-fragtog предоставляет несколько приятных функций, которые переключают между исходным кодом и предварительным просмотром формул, что означает, что вам не нужно повторно использовать функцию org-latex-preview. Пакет загружается после загрузки пакета Org.
В итоге в org отображается latex в виде формул, при установке курсора на формулу открывается разметка latex.
#+begin_src emacs-lisp
  ;; LaTeX previews
  (use-package org-fragtog
    :after org
    :custom
    (org-startup-with-latex-preview t)
    :hook
    (org-mode . org-fragtog-mode)
    :custom
    (org-format-latex-options
     (plist-put org-format-latex-options :scale 2)
     (plist-put org-format-latex-options :foreground 'auto)
     (plist-put org-format-latex-options :background 'auto)))
#+end_src

** Org-roam
#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory (file-truename "~/Documents/notes")) ;; Задаёт путь к папке с org файлами
    (org-roam-completion-everywhere t) ;; Позволяет выполнять completion-at-point набрав несколько символов в любом месте файла
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ("C-c n j" . org-roam-dailies-capture-today)
           ("C-c n r" . org-roam-node-random)
           ("C-c n o" . org-id-get-create)
           ("C-c n t" . org-roam-tag-add)
           ("C-c n a" . org-roam-alias-add)
           :map org-mode-map
           ("C-M-i" . completion-at-point))
    :config
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag))) ;; Настройка отображения заметок при вертикальном завершении
    (org-roam-db-autosync-mode) ;; Включает постоянное кеширование изменённых файлов
    ;; If using org-roam-protocol
    ;; (require 'org-roam-protocol)
    )
#+end_src
*** Шаблоны Org-roam для заметок
#+begin_src emacs-lisp
  (setq org-roam-capture-templates
        '(("d" "default" plain
           "%?"
           :target
           (file+head "${slug}.org"
                      "#+title: ${title}\n#+date: %u\n#+type: \n#+last_modified: %U\n\n")
           :immediate-finish t)
          ("b" "literature note" plain
           "%?"
           :target
           (file+head
            "%(expand-file-name (or citar-org-roam-subdir \"\") org-roam-directory)/${citar-citekey}.org"
            "#+title: ${note-title}\n#+created: %U\n#+last_modified: %U\n\n")
           :unnarrowed t)))

#+end_src
*** Org-roam буфер
#+begin_src emacs-lisp
  ;; Настройка содержания
  (setq org-roam-mode-sections
        (list #'org-roam-backlinks-section
              #'org-roam-reflinks-section
              #'org-roam-unlinked-references-section
              ))

  ;; Отображение буфера в боковой панели
  (add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
                 (display-buffer-in-side-window)
                 (side . right)
                 (slot . 0)
                 (window-width . 0.33)
                 (window-parameters . ((no-other-window . t)
                                       (no-delete-other-windows . t)))))
#+end_src

** Org-agenda
#+begin_src emacs-lisp
  ;; (setq org-agenda-files '("~/Documents/notes/"))
  ;; (setq org-agenda-files '("~/Documents/notes/daily"))
  ;; (setq org-agenda-files (directory-files-recursively "~/Documents/notes/" "\\.org$"))

  ;; Убирает из agenda заголовки без TODO
  (setq org-agenda-skip-function-global 
        '(org-agenda-skip-entry-if 'nottodo '("TODO")))

  ;; Добавляет альтернативные виды для повестки дня
  (setq org-agenda-custom-commands
        '(("v" "A better agenda view"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (tags "PRIORITY=\"B\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Medium-priority unfinished tasks:")))
            (tags "PRIORITY=\"C\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Low-priority unfinished tasks:")))
            (agenda "")
            (alltodo "")))))
#+end_src

** Org-agenda-files-track
Автоматически добавляет и удаляет файлы в org-agenda-files
#+begin_src emacs-lisp
  (use-package org-agenda-files-track
  :hook (org-mode . org-agenda-files-track-mode)
  ) ;; не работает почему-то, но функция ниже спасает

  ;; Функция для прохода по файлам org в указанной папке и добавления файлов с задачами в org-agenda-files
  (defun my/org-agenda-files-track-init ()
    "(Re)initialize dynamic agenda files.

              This can take a long time, so it is recommended to run this only
              on installation and when first tasks are added to many files via
              methods the save hook cannot detect, like file synchronization."
    (interactive)
    ;; ;; uncomment if storing org-agenda-files in file
    ;; (make-empty-file org-agenda-files 'force)g
    (org-store-new-agenda-file-list
     (directory-files-recursively
      "~/Documents/notes" (rx ".org" eos) nil
      ;; ignore hidden directories like .git and .attach
      (lambda (subdir)
        (not (eq ?. (string-to-char (file-name-nondirectory subdir)))))))
    ;; use ql here if desired
    (org-agenda-files-track-cleanup-files 'full)
    (message "Initialized agenda files"))

  ;; Присвоение org-agenda-files одного имени файла, чтобы сохранить org-agenda-files в сеансах Emacs
  ;;(setq org-agenda-files
    ;;    (expand-file-name "org-agenda-files.txt" (xdg-cache-home)))
#+end_src
** Olivetti-mode
Добавляет возможность переключения в режим фокуса. Закрываются все буферы, кроме текущего, текущий буфер центрируется по центру, текст увеличивается, ширина буфера ограничивается
#+begin_src emacs-lisp
  ;; Distraction-free writing
  (defun ews-distraction-free ()
    "Distraction-free writing environment using Olivetti package."
    (interactive)
    (if (equal olivetti-mode nil)
        (progn
          (window-configuration-to-register 1)
          (delete-other-windows)
          (text-scale-set 2)
          (olivetti-mode t))
      (progn
        (if (eq (length (window-list)) 1)
            (jump-to-register 1))
        (olivetti-mode 0)
        (text-scale-set 0))))

  (use-package olivetti
    :demand t
    :bind
    (("<f9>" . ews-distraction-free)))
#+end_src

** Note Drawers for org
Добавляет drawers (заметку) в заголовок текущего раздела. Drawers не выводятся при конвертации org файлов в другой формат
#+begin_src emacs-lisp
  ;; Notes drawers
  (defun ews-org-insert-notes-drawer ()
    "Generate a NOTES drawer under the heading of the current or jump to an existing one."
    (interactive)
    (push-mark)
    (org-previous-visible-heading 1)
    (next-line 1)
    (if (looking-at-p "^[ \t]*:NOTES:")
        (progn
          (re-search-forward "^[ \t]*:END:" nil t)
          (previous-line)
          (end-of-line)
          (org-return))
      (org-insert-drawer nil "NOTES"))
    (message "Press C-u C-SPACE to return to previous position."))

  (with-eval-after-load "org"
    (define-key org-mode-map (kbd "C-c C-x n") #'ews-org-insert-notes-drawer))
#+end_src
** Проверка орфографии
*** Flyspell
Проверка орфографии с помощью утилиты hunspell

#+begin_src emacs-lisp
  ;; Spell checking
  ;; Requires Hunspell
  (use-package flyspell
    :custom
    (ispell-program-name "hunspell")
    ;; (ispell-default-dictionary "ru_RU")
    :hook (text-mode . flyspell-mode)
    :bind (("M-<f7>" . flyspell-buffer)))

  (use-package flyspell-correct
    :after (flyspell)
    :bind (("C-;" . flyspell-auto-correct-previous-word)
           ("<f7>" . flyspell-correct-wrapper)))
#+end_src

*** Guess-language
Определяет язык текста для работы Flyspell
#+begin_src emacs-lisp
  (use-package guess-language         ; Automatically detect language for Flyspell
    :ensure t
    :defer t
    :init (add-hook 'text-mode-hook #'guess-language-mode)
    :config
    (setq guess-language-langcodes '((en . ("en_US" "English"))
                                     (ru . ("ru_RU" "Russian")))
          guess-language-languages '(en ru)
          guess-language-min-paragraph-length 35)
    :diminish guess-language-mode)
#+end_src
** Библиография
*** Bibtex-mode
#+begin_src emacs-lisp
  (use-package bibtex
    :custom
    (bibtex-dialect 'BibTeX)
    (bibtex-user-optional-fields
     '(("keywords" "Keywords to describe the entry" "")
       ("file" "Link to a document file." "" )))
    (bibtex-align-at-equal-sign t))
#+end_src
*** Citar
#+begin_src emacs-lisp
  (use-package citar
    :no-require
    :custom
    (org-cite-global-bibliography 
     (directory-files "~/Documents/library/" t "^[A-Z|a-z|0-9].+.bib$"))
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    (citar-bibliography org-cite-global-bibliography)
    ;; optional: org-cite-insert is also bound to C-c C-x C-@
    :bind
    (:map org-mode-map :package org ("C-c b" . #'org-cite-insert)))

  (use-package citar-embark
    :after citar embark
    :no-require
    :config (citar-embark-mode))
    #+end_src
*** Citar-Org-Roam
Интеграция citar и org-roam
#+begin_src emacs-lisp
  (use-package citar-org-roam
    :after (citar org-roam)
    :config
    (citar-org-roam-mode)
    (setq citar-org-roam-note-title-template "${author} - ${title}") ;; устанавливает заголовк для библиографических заметок
    (setq citar-org-roam-capture-template-key "b") ;; устанавливает шаблон для библиографических заметок
    )
#+end_src

* GIT
** Magit
[[https://magit.vc/manual/][Magit]] is a full-featured git client for Emacs.
#+begin_src emacs-lisp
  (use-package magit)
#+end_src

* PROJECTILE
[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs.
Для того, чтобы конкретная папка воспринималась как проект в ней или должна быть инициализирован git, либо в корне находится файл =.projectile=
#+begin_src emacs-lisp
  (use-package projectile
    :config
    (projectile-mode 1))
#+end_src

* УДОБСТВО
** WHICH-KEY
Отображает списки сочетаний клавиш, при вводе префиксов
#+begin_src emacs-lisp
  (use-package which-key
    :init
    (which-key-mode 1)
    :diminish
    :config
    (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order-alpha
          which-key-allow-imprecise-window-fit nil
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 6
          which-key-side-window-slot -10
          which-key-side-window-max-height 0.25
          which-key-idle-delay 0.8
          which-key-max-description-length 25
          which-key-allow-imprecise-window-fit nil
          which-key-separator " → " ))
#+end_src

** DIMINISH
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.  With this package installed, you can add ':diminish' to any use-package block to hide that particular mode in the modeline.

#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

** DASHBOARD
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

#+begin_src emacs-lisp
  (use-package dashboard
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
    (setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
    (setq dashboard-center-content nil) ;; set to 't' for centered content
    (setq dashboard-items '((recents . 10)
                            (agenda . 5 )
                            (bookmarks . 3)
                            (projects . 3)
                            (registers . 3)))
    :custom 
    (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book")))
    :config
    (dashboard-setup-startup-hook))
#+end_src

* ОФОРМЛЕНИЕ
** FONTS
Определение различных шрифтов, которые будет использовать Emacs.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :font "JetBrains Mono"
                      :height 110
                      :weight 'medium)
  (set-face-attribute 'variable-pitch nil
                      :font "Ubuntu"
                      :height 120
                      :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
                      :font "JetBrains Mono"
                      :height 110
                      :weight 'medium)
  ;; Makes commented text and keywords italics.
  ;; This is working in emacsclient but not emacs.
  ;; Your font must have an italic face available.
  (set-face-attribute 'font-lock-comment-face nil
                      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
                      :slant 'italic)

  ;; This sets the default font on all graphical frames created after restarting Emacs.
  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
  ;; are not right unless I also add this method of setting the default font.
  (add-to-list 'default-frame-alist '(font . "JetBrains Mono-11"))

  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 2)
#+end_src

** Установка темы
#+begin_src emacs-lisp
  (use-package atom-one-dark-theme)
  (load-theme 'atom-one-dark t)
#+end_src

** Плавная прокрутка
#+begin_src emacs-lisp
  (setq redisplay-dont-pause t
        scroll-margin 5
        scroll-step 1
        scroll-conservatively 10000
        scroll-preserve-screen-position 1)
#+end_src

** ALL THE ICONS
Это набор значков, который можно использовать с dashboard, dired, ibuffer и другими программами Emacs

#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src
** RAINBOW DELIMITERS
Добавляет окраску различным цветом скобок и кавычек

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
           (clojure-mode . rainbow-delimiters-mode)))
#+end_src

** RAINBOW MODE
Отображать фактический цвет в качестве фона для любого шестнадцатеричного значения цвета (например, #ffffff). Приведенный ниже блок кода включает режим rainbow во всех режимах программирования (prog-mode), а также в org-mode, именно поэтому rainbow работает в этом документе.  

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :diminish
    :hook org-mode prog-mode)
#+end_src

* Emacs Writing Studio
Конфигурация [[https://lucidmanager.org/productivity/more-productive-with-emacs/][EWS]] затрагивает не только этот раздел, но и настройки use-package, org-mode, org-roam, автозавершения и несколько стандартных настроек
** Проверка установки в системе программ
Выводит в буфере *Message* сообщения об отсутствии установки прогамм в системе для различных действий
#+begin_src emacs-lisp
  ;; Check for missing executables
  (defun ews-missing-executables (prog-list)
    "Identified missing executables in PROG-LIST.

  Sublists indicate that one of the entries is required."
    (require 'cl-lib)
    (let ((missing '()))
      (dolist (exec prog-list)
        (if (listp exec)
            (unless (cl-some #'executable-find exec)
              (push (format "(%s)" (mapconcat 'identity exec " or ")) missing))
          (unless (executable-find exec)
            (push exec missing))))
      (if missing
          (user-error "Missing executable files(s): %s"
                      (mapconcat 'identity missing ", ")))))

  (ews-missing-executables
   '("onlyoffice" "zip" "pdftotext" "ddjvu"
     ("convert" "gm") "exiftool" "latex" "curl"
     "hunspell" ;; Spellcheck
     ("grep" "ripgrep") ;; Search files
     ("gs" "mutool") ;; PDF
     ("mpg321" "ogg123" "mplayer" "mpv" "vlc"))) ;; Play music
#+end_src
* УСТАНОВКИ КЛАВИШ
Отображение последних открытых файлов
#+begin_src emacs-lisp
  (recentf-mode t)                ;; Позволяет запоминать последние открытые файлы
  ;; (global-set-key "\C-x\ \C-g" 'recentf-open-files) ;; Не удобно, так как после ошибочно нажатого префикса нельзя просто так прервать, да и dashboard пользуюсь
#+end_src
* REVERSE-IM
Ввод команд для Emacs на альтернативном языке. Должен располагаться после установки всех хоткеев.
#+begin_src emacs-lisp
  ;; Needed for `:after char-fold' to work
  (use-package char-fold
    :custom
    (char-fold-symmetric t)
    (search-default-mode #'char-fold-to-regexp))

  (use-package reverse-im
    :demand t ; always load it
    :after char-fold ; but only after `char-fold' is loaded
    :bind
    ("M-T" . reverse-im-translate-word) ; fix a word in wrong layout
    :custom
    (reverse-im-char-fold t) ; use lax matching
    (reverse-im-read-char-advice-function #'reverse-im-read-char-include)
    (reverse-im-input-methods '("russian-computer")) ; translate these methods
    :config
    (reverse-im-mode t)) ; turn the mode on
#+end_src
* УСТАНОВКА ЗНАЧЕНИЙ ПЕРЕМЕННЫХ
Настройка Emacs изменением стандартных переменных

#+begin_src emacs-lisp
  (menu-bar-mode -1)           ;; Disable the menu bar 
  (tool-bar-mode -1)           ;; Disable the tool bar
  (scroll-bar-mode -1)         ;; Disable the scroll bar
  ;; (tab-bar-mode t)             ;; Позволяет пользоваться вкладками C-x t 2, переключение вперёд на C-x TAB, назад C-SHIFT-TAB, закрыть C-x t 0

  (setq calendar-week-start-day 1) ;; Устанавливает началом недели понедельник

  (global-display-line-numbers-mode t) ;; Отображает номера строк

  (delete-selection-mode 1)       ;; Содержимое выделенного региона удаляется при начале набора
  (electric-indent-mode -1)       ;; Turn off the weird indenting that Emacs does by default.
  (electric-pair-mode 1)          ;; Автоматическое cоздание закрывающих скобок и кавычек
  (global-auto-revert-mode t)     ;; Automatically show changes if the file has changed
  (global-visual-line-mode t)     ;; Enable truncated lines

  (setq make-backup-files nil)    ;; Отключает создание бэкапов
  (setq auto-save-list-file-name nil) ;; Не создаёт .saves файлы
  (setq auto-save-default nil)    ;; Отключает автоматическое сохранение файлов

  (put 'upcase-region 'disabled nil) ;; Включает команду преобразования в верхний регистр по C-x C-u
  (put 'downcase-region 'disabled nil) ;; Включает команду преобразования в нижний регистр по C-x C-l
  (put 'narrow-to-region 'disabled nil) ;; Включает сужение, аналог zoom в logseq, выделенного региона по C-x n n

  (setq org-indent-indentation-per-level 4) ;; Отступ слева между уровнями заголовков
#+end_src
